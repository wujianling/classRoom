// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"
	"time"

	classroom "github.com/smallq_class/web/internal/handler/classroom"
	classroomInfo "github.com/smallq_class/web/internal/handler/classroomInfo"
	classroomStu "github.com/smallq_class/web/internal/handler/classroomStu"
	classroomTalk "github.com/smallq_class/web/internal/handler/classroomTalk"
	course "github.com/smallq_class/web/internal/handler/course"
	courseLog "github.com/smallq_class/web/internal/handler/courseLog"
	coursePackage "github.com/smallq_class/web/internal/handler/coursePackage"
	family "github.com/smallq_class/web/internal/handler/family"
	parent "github.com/smallq_class/web/internal/handler/parent"
	schoolBanner "github.com/smallq_class/web/internal/handler/schoolBanner"
	schoolContent "github.com/smallq_class/web/internal/handler/schoolContent"
	schoolNotice "github.com/smallq_class/web/internal/handler/schoolNotice"
	student "github.com/smallq_class/web/internal/handler/student"
	teacher "github.com/smallq_class/web/internal/handler/teacher"
	"github.com/smallq_class/web/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: classroom.AddClassRoomHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: classroom.DelClassRoomHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: classroom.SearchClassRoomInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: classroom.SearchClassRoomListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: classroom.SaveClassRoomHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/classroom"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: classroomInfo.AddClassRoomInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: classroomInfo.DelClassRoomInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: classroomInfo.SearchClassRoomInfoInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: classroomInfo.SearchClassRoomInfoListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: classroomInfo.SaveClassRoomInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/classroom_info"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: classroomStu.AddClassRoomStuHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: classroomStu.DelClassRoomStuHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: classroomStu.SearchClassRoomStuInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: classroomStu.SearchClassRoomStuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: classroomStu.SaveClassRoomStuHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/classroom_stu"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: classroomTalk.AddClassRoomTalkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: classroomTalk.DelClassRoomTalkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: classroomTalk.SearchClassRoomTalkInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: classroomTalk.SearchClassRoomTalkListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: classroomTalk.SaveClassRoomTalkHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/classroom_talk"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: course.AddCourseHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: course.DelCourseHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: course.SearchCourseInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: course.SearchCourseListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: course.SaveCourseHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/course"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: courseLog.AddCourseLogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: courseLog.DelCourseLogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: courseLog.SearchCourseLogInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: courseLog.SearchCourseLogListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: courseLog.SaveCourseLogHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/course_log"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: coursePackage.AddCoursePackageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: coursePackage.DelCoursePackageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: coursePackage.SearchCoursePackageInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: coursePackage.SearchCoursePackageListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: coursePackage.SaveCoursePackageHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/course_package"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: family.AddFamilyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: family.DelFamilyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: family.SearchFamliyInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: family.SearchFamilyListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: family.SaveFamilyHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/family"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: parent.AddParentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: parent.DelParentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: parent.SearchParentInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: parent.SearchParentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: parent.SaveParentHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/parent"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: schoolBanner.AddSchoolBannerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: schoolBanner.DelSchoolBannerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: schoolBanner.SearchSchoolBannerInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: schoolBanner.SearchSchoolBannerListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: schoolBanner.SaveSchoolBannerHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/school_banner"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: schoolContent.AddSchoolContentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: schoolContent.DelSchoolContentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: schoolContent.SearchSchoolContentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: schoolContent.SearchSchoolContentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: schoolContent.SaveSchoolContentHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/school_content"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: schoolNotice.AddSchoolNoticeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: schoolNotice.DelSchoolNoticeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: schoolNotice.SearchSchoolNoticeInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: schoolNotice.SearchSchoolNoticeListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: schoolNotice.SaveSchoolNoticeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/school_notice"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: student.AddStudentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: student.DelStudentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: student.SearchStudentInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: student.SearchStudentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: student.SaveStudentHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/student"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: teacher.AddTeacherHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/del",
				Handler: teacher.DelTeacherHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info",
				Handler: teacher.SearchTeacherInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/list",
				Handler: teacher.SearchTeacherListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/save",
				Handler: teacher.SaveTeacherHandler(serverCtx),
			},
		},
		rest.WithPrefix("/web/teacher"),
		rest.WithTimeout(10000*time.Millisecond),
	)
}
