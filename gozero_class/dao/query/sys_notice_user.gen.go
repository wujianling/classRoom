// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/smallq_class/dao/model"
)

func newSysNoticeUser(db *gorm.DB, opts ...gen.DOOption) sysNoticeUser {
	_sysNoticeUser := sysNoticeUser{}

	_sysNoticeUser.sysNoticeUserDo.UseDB(db, opts...)
	_sysNoticeUser.sysNoticeUserDo.UseModel(&model.SysNoticeUser{})

	tableName := _sysNoticeUser.sysNoticeUserDo.TableName()
	_sysNoticeUser.ALL = field.NewAsterisk(tableName)
	_sysNoticeUser.UserID = field.NewInt64(tableName, "user_id")
	_sysNoticeUser.NoticeID = field.NewInt64(tableName, "notice_id")
	_sysNoticeUser.Status = field.NewString(tableName, "status")

	_sysNoticeUser.fillFieldMap()

	return _sysNoticeUser
}

// sysNoticeUser 消息通知关联用户表
type sysNoticeUser struct {
	sysNoticeUserDo sysNoticeUserDo

	ALL      field.Asterisk
	UserID   field.Int64
	NoticeID field.Int64
	Status   field.String

	fieldMap map[string]field.Expr
}

func (s sysNoticeUser) Table(newTableName string) *sysNoticeUser {
	s.sysNoticeUserDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysNoticeUser) As(alias string) *sysNoticeUser {
	s.sysNoticeUserDo.DO = *(s.sysNoticeUserDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysNoticeUser) updateTableName(table string) *sysNoticeUser {
	s.ALL = field.NewAsterisk(table)
	s.UserID = field.NewInt64(table, "user_id")
	s.NoticeID = field.NewInt64(table, "notice_id")
	s.Status = field.NewString(table, "status")

	s.fillFieldMap()

	return s
}

func (s *sysNoticeUser) WithContext(ctx context.Context) *sysNoticeUserDo {
	return s.sysNoticeUserDo.WithContext(ctx)
}

func (s sysNoticeUser) TableName() string { return s.sysNoticeUserDo.TableName() }

func (s sysNoticeUser) Alias() string { return s.sysNoticeUserDo.Alias() }

func (s sysNoticeUser) Columns(cols ...field.Expr) gen.Columns {
	return s.sysNoticeUserDo.Columns(cols...)
}

func (s *sysNoticeUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysNoticeUser) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["notice_id"] = s.NoticeID
	s.fieldMap["status"] = s.Status
}

func (s sysNoticeUser) clone(db *gorm.DB) sysNoticeUser {
	s.sysNoticeUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysNoticeUser) replaceDB(db *gorm.DB) sysNoticeUser {
	s.sysNoticeUserDo.ReplaceDB(db)
	return s
}

type sysNoticeUserDo struct{ gen.DO }

func (s sysNoticeUserDo) Debug() *sysNoticeUserDo {
	return s.withDO(s.DO.Debug())
}

func (s sysNoticeUserDo) WithContext(ctx context.Context) *sysNoticeUserDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysNoticeUserDo) ReadDB() *sysNoticeUserDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysNoticeUserDo) WriteDB() *sysNoticeUserDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysNoticeUserDo) Session(config *gorm.Session) *sysNoticeUserDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysNoticeUserDo) Clauses(conds ...clause.Expression) *sysNoticeUserDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysNoticeUserDo) Returning(value interface{}, columns ...string) *sysNoticeUserDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysNoticeUserDo) Not(conds ...gen.Condition) *sysNoticeUserDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysNoticeUserDo) Or(conds ...gen.Condition) *sysNoticeUserDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysNoticeUserDo) Select(conds ...field.Expr) *sysNoticeUserDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysNoticeUserDo) Where(conds ...gen.Condition) *sysNoticeUserDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysNoticeUserDo) Order(conds ...field.Expr) *sysNoticeUserDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysNoticeUserDo) Distinct(cols ...field.Expr) *sysNoticeUserDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysNoticeUserDo) Omit(cols ...field.Expr) *sysNoticeUserDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysNoticeUserDo) Join(table schema.Tabler, on ...field.Expr) *sysNoticeUserDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysNoticeUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysNoticeUserDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysNoticeUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysNoticeUserDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysNoticeUserDo) Group(cols ...field.Expr) *sysNoticeUserDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysNoticeUserDo) Having(conds ...gen.Condition) *sysNoticeUserDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysNoticeUserDo) Limit(limit int) *sysNoticeUserDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysNoticeUserDo) Offset(offset int) *sysNoticeUserDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysNoticeUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysNoticeUserDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysNoticeUserDo) Unscoped() *sysNoticeUserDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysNoticeUserDo) Create(values ...*model.SysNoticeUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysNoticeUserDo) CreateInBatches(values []*model.SysNoticeUser, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysNoticeUserDo) Save(values ...*model.SysNoticeUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysNoticeUserDo) First() (*model.SysNoticeUser, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNoticeUser), nil
	}
}

func (s sysNoticeUserDo) Take() (*model.SysNoticeUser, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNoticeUser), nil
	}
}

func (s sysNoticeUserDo) Last() (*model.SysNoticeUser, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNoticeUser), nil
	}
}

func (s sysNoticeUserDo) Find() ([]*model.SysNoticeUser, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysNoticeUser), err
}

func (s sysNoticeUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysNoticeUser, err error) {
	buf := make([]*model.SysNoticeUser, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysNoticeUserDo) FindInBatches(result *[]*model.SysNoticeUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysNoticeUserDo) Attrs(attrs ...field.AssignExpr) *sysNoticeUserDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysNoticeUserDo) Assign(attrs ...field.AssignExpr) *sysNoticeUserDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysNoticeUserDo) Joins(fields ...field.RelationField) *sysNoticeUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysNoticeUserDo) Preload(fields ...field.RelationField) *sysNoticeUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysNoticeUserDo) FirstOrInit() (*model.SysNoticeUser, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNoticeUser), nil
	}
}

func (s sysNoticeUserDo) FirstOrCreate() (*model.SysNoticeUser, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNoticeUser), nil
	}
}

func (s sysNoticeUserDo) FindByPage(offset int, limit int) (result []*model.SysNoticeUser, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysNoticeUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysNoticeUserDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysNoticeUserDo) Delete(models ...*model.SysNoticeUser) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysNoticeUserDo) withDO(do gen.Dao) *sysNoticeUserDo {
	s.DO = *do.(*gen.DO)
	return s
}
