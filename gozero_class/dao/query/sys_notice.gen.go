// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/smallq_class/dao/model"
)

func newSysNotice(db *gorm.DB, opts ...gen.DOOption) sysNotice {
	_sysNotice := sysNotice{}

	_sysNotice.sysNoticeDo.UseDB(db, opts...)
	_sysNotice.sysNoticeDo.UseModel(&model.SysNotice{})

	tableName := _sysNotice.sysNoticeDo.TableName()
	_sysNotice.ALL = field.NewAsterisk(tableName)
	_sysNotice.ID = field.NewInt64(tableName, "id")
	_sysNotice.Title = field.NewString(tableName, "title")
	_sysNotice.Type = field.NewString(tableName, "type")
	_sysNotice.Txt = field.NewBytes(tableName, "txt")
	_sysNotice.DeptID = field.NewInt64(tableName, "dept_id")
	_sysNotice.DeptIds = field.NewString(tableName, "dept_ids")
	_sysNotice.CreateName = field.NewString(tableName, "create_name")
	_sysNotice.CreateBy = field.NewInt64(tableName, "create_by")
	_sysNotice.CreateTime = field.NewTime(tableName, "create_time")

	_sysNotice.fillFieldMap()

	return _sysNotice
}

// sysNotice 通知公告表
type sysNotice struct {
	sysNoticeDo sysNoticeDo

	ALL        field.Asterisk
	ID         field.Int64  // 公告ID
	Title      field.String // 公告标题
	Type       field.String // 公告类型（1通知 2公告）
	Txt        field.Bytes  // 公告内容
	DeptID     field.Int64  // 发件人所在部门
	DeptIds    field.String // 发送部门
	CreateName field.String // 创建者名称
	CreateBy   field.Int64  // 创建者
	CreateTime field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (s sysNotice) Table(newTableName string) *sysNotice {
	s.sysNoticeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysNotice) As(alias string) *sysNotice {
	s.sysNoticeDo.DO = *(s.sysNoticeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysNotice) updateTableName(table string) *sysNotice {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Title = field.NewString(table, "title")
	s.Type = field.NewString(table, "type")
	s.Txt = field.NewBytes(table, "txt")
	s.DeptID = field.NewInt64(table, "dept_id")
	s.DeptIds = field.NewString(table, "dept_ids")
	s.CreateName = field.NewString(table, "create_name")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")

	s.fillFieldMap()

	return s
}

func (s *sysNotice) WithContext(ctx context.Context) *sysNoticeDo {
	return s.sysNoticeDo.WithContext(ctx)
}

func (s sysNotice) TableName() string { return s.sysNoticeDo.TableName() }

func (s sysNotice) Alias() string { return s.sysNoticeDo.Alias() }

func (s sysNotice) Columns(cols ...field.Expr) gen.Columns { return s.sysNoticeDo.Columns(cols...) }

func (s *sysNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysNotice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["title"] = s.Title
	s.fieldMap["type"] = s.Type
	s.fieldMap["txt"] = s.Txt
	s.fieldMap["dept_id"] = s.DeptID
	s.fieldMap["dept_ids"] = s.DeptIds
	s.fieldMap["create_name"] = s.CreateName
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
}

func (s sysNotice) clone(db *gorm.DB) sysNotice {
	s.sysNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysNotice) replaceDB(db *gorm.DB) sysNotice {
	s.sysNoticeDo.ReplaceDB(db)
	return s
}

type sysNoticeDo struct{ gen.DO }

func (s sysNoticeDo) Debug() *sysNoticeDo {
	return s.withDO(s.DO.Debug())
}

func (s sysNoticeDo) WithContext(ctx context.Context) *sysNoticeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysNoticeDo) ReadDB() *sysNoticeDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysNoticeDo) WriteDB() *sysNoticeDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysNoticeDo) Session(config *gorm.Session) *sysNoticeDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysNoticeDo) Clauses(conds ...clause.Expression) *sysNoticeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysNoticeDo) Returning(value interface{}, columns ...string) *sysNoticeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysNoticeDo) Not(conds ...gen.Condition) *sysNoticeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysNoticeDo) Or(conds ...gen.Condition) *sysNoticeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysNoticeDo) Select(conds ...field.Expr) *sysNoticeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysNoticeDo) Where(conds ...gen.Condition) *sysNoticeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysNoticeDo) Order(conds ...field.Expr) *sysNoticeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysNoticeDo) Distinct(cols ...field.Expr) *sysNoticeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysNoticeDo) Omit(cols ...field.Expr) *sysNoticeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysNoticeDo) Join(table schema.Tabler, on ...field.Expr) *sysNoticeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysNoticeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysNoticeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysNoticeDo) Group(cols ...field.Expr) *sysNoticeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysNoticeDo) Having(conds ...gen.Condition) *sysNoticeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysNoticeDo) Limit(limit int) *sysNoticeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysNoticeDo) Offset(offset int) *sysNoticeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysNoticeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysNoticeDo) Unscoped() *sysNoticeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysNoticeDo) Create(values ...*model.SysNotice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysNoticeDo) CreateInBatches(values []*model.SysNotice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysNoticeDo) Save(values ...*model.SysNotice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysNoticeDo) First() (*model.SysNotice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) Take() (*model.SysNotice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) Last() (*model.SysNotice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) Find() ([]*model.SysNotice, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysNotice), err
}

func (s sysNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysNotice, err error) {
	buf := make([]*model.SysNotice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysNoticeDo) FindInBatches(result *[]*model.SysNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysNoticeDo) Attrs(attrs ...field.AssignExpr) *sysNoticeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysNoticeDo) Assign(attrs ...field.AssignExpr) *sysNoticeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysNoticeDo) Joins(fields ...field.RelationField) *sysNoticeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysNoticeDo) Preload(fields ...field.RelationField) *sysNoticeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysNoticeDo) FirstOrInit() (*model.SysNotice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) FirstOrCreate() (*model.SysNotice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysNotice), nil
	}
}

func (s sysNoticeDo) FindByPage(offset int, limit int) (result []*model.SysNotice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysNoticeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysNoticeDo) Delete(models ...*model.SysNotice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysNoticeDo) withDO(do gen.Dao) *sysNoticeDo {
	s.DO = *do.(*gen.DO)
	return s
}
